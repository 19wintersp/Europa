program => statement* EOF


# statements
statement => exprStmt | varDecl | block | ifStmt | whileStmt | doWhileStmt | breakStmt | continueStmt | fnDecl | returnStmt

exprStmt => ( expr ";" )
varDecl => "var" IDENTIFIER ("=" expr )? ";"

ifStmt => "if" expr block ( "elif" expr block )* ( "else" block )?

whileStmt => "while" expr block
doWhileStmt => "do" block "while" expr ";"
forStmt => "for" ( ( IDENTIFIER "in" expr ) | ( "(" IDENTIFIER "in" expr ")" ) ) block

breakStmt => "break" ";"
continueStmt => "continue" ";"

fnDecl => "fn" IDENTIFIER function
returnStmt => "return" expr? ";"


# expressions
expr => ternary

ternary => assignment ( "?" expr ":" ternary )?
assignment => ( IDENTIFIER ( "=" | "+=" | "-=" | "*=" | "/=" | "**=" | "%=" ) assignment ) | or

or => and ( "or" and )*
and => equality ( "and" equality )*

equality => comparison ( ( "==" | "!=" ) comparison )*
comparison => addition ( ( ">" | "<" | ">=" | "<=" ) addition )*

addition => times ( ( "-" | "+" ) times )*
times => unary ( ( "*" | "/" | "%" ) unary )*

unary => ( ( "!" | "-" ) unary ) | call
call => primary ( "(" args? ")" | "[" expr "]" )*

primary => NUMBER | STRING | IDENTIFIER | "true" | "false" | "nil" | "(" expr ")" | block | ifStmt | array

block => "{" statement* "}"
array => "[" ( expr "," )* ( expr )? "]"

args => expr ( "," expr )*
params => IDENTIFIER ( "," IDENTIFIER )*

function => "(" params? ")" block