program => statement* EOF


# statements
statement => exprStmt | varDecl | block | ifStmt | whileStmt | doWhileStmt

exprStmt => ( expression ";" )
varDecl => "var" IDENTIFIER ("=" expression )? ";"
ifStmt => "if" expr block ( "elif" expr block )* ( "else" block )?
whileStmt => "while" expr block
doWhileStmt => "do" block "while" expr ";"


# expressions
expression => ternary

ternary => assignment ( "?" expression ":" ternary )?
assignment => ( IDENTIFIER ( "=" | "+=" | "-=" | "*=" | "/=" | "**=" | "%=" ) assignment ) | or

or => and ( "or" and )*
and => equality ( "and" equality )*

equality => comparison ( ( "==" | "!=" ) comparison )*
comparison => addition ( ( ">" | "<" | ">=" | "<=" ) addition )*

addition => times ( ( "-" | "+" ) times )*
times => unary ( ( "*" | "/" | "%" ) unary )*

unary => ( ( "!" | "-" ) unary ) | call
call => primary ( "(" args? ")" )*

primary => NUMBER | STRING | IDENTIFIER | "true" | "false" | "nil" | "(" expression ")" | block

block => "{" statement* "}"
args => expr ( "," expr )*